<!DOCTYPE html>
<html>
<head>
  <base target="_top">
  <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  <style>
    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 20px; background: #f5f6fa; color: #333; transition: background 0.3s, color 0.3s; }
    h2 { text-align: center; color: #2c3e50; margin-bottom: 20px; }
    body.dark-mode { background: #181a1b; color: #f0f0f0; }
    body.dark-mode h2 { color: #ecf0f1; }
    body.dark-mode .column { background: #242627; }
    body.dark-mode .task-card { background: #2f3132; color: #f0f0f0; }
    body.dark-mode #dashboard div { background: #242627; color: #f0f0f0; }
    body.dark-mode form { background: #242627; }
    body.dark-mode input, body.dark-mode select { background:#2f3132; color:#f0f0f0; border:1px solid #555; }
    body.dark-mode button { background:#3498db; }
    body.dark-mode .chart-card { background:#242627; }
    body.dark-mode .report-writing,
    body.dark-mode .report-controls,
    body.dark-mode #reportResults { background: #242627; color: #f0f0f0; }
    body.dark-mode .task-report-item { background: #2f3132 !important; border-color: #555; }
    body.dark-mode #reportContent { background: #2f3132; color: #f0f0f0; border-color: #555; }

    #toggleTheme { position: absolute; top: 20px; right: 20px; background: #3498db; border: none; color: white; padding: 8px 14px; border-radius: 6px; cursor: pointer; font-size: 14px; transition: 0.3s; }
    #toggleTheme:hover { background: #2980b9; }

    #dashboard { display: flex; gap: 20px; justify-content: center; margin-bottom: 30px; }
    #dashboard div { background: #fff; padding: 15px 25px; border-radius: 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); font-size: 16px; font-weight: 500; }

    .charts { display: flex; gap: 20px; justify-content: center; margin-bottom: 30px; }
    .chart-card { background: #fff; border-radius: 12px; padding: 15px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); }

    form { display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; margin-bottom: 20px; background: #fff; padding: 20px; border-radius: 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); }
    form input, form select, form button { padding: 10px; border-radius: 6px; border: 1px solid #ccc; font-size: 14px; }
    form button { background: #3498db; color: #fff; border: none; cursor: pointer; transition: 0.3s; }
    form button:hover { background: #2980b9; }

    .board { display: flex; gap: 20px; justify-content: center; }
    .column { width: 30%; background: #fff; min-height: 350px; padding: 15px; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
    .column h3 { text-align: center; color: #2c3e50; margin-bottom: 10px; font-size: 18px; }

    .task-card { padding: 12px; margin-bottom: 10px; border-radius: 8px; cursor: grab; box-shadow: 0 2px 4px rgba(0,0,0,0.05); transition: transform 0.2s; color: white; }
    .task-card:hover { transform: scale(1.02); }

    .description { font-size: 0.9em; margin-top: 4px; }
    .overdue { border: 2px solid #e74c3c; }

    .assignee-badge { display: inline-flex; align-items: center; gap: 6px; font-size: 0.9em; margin-top: 4px; }
    .assignee-badge .circle { width: 18px; height: 18px; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; color: white; font-size: 0.7em; font-weight: bold; }

    #downloadBtn { display: block; margin: 0 auto 30px; padding: 10px 20px; border-radius: 6px; border: none; background: #2ecc71; color: white; cursor: pointer; font-size: 14px; transition: 0.3s; }
    #downloadBtn:hover { background: #27ae60; }

    .report-writing { border-left: 4px solid #3498db; background: #fff; padding: 20px; border-radius: 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); margin-bottom: 20px; }
    .task-report-item { transition: transform 0.2s, box-shadow 0.2s; border: 1px solid #ddd; padding: 15px; border-radius: 8px; margin-bottom: 10px; }
    .task-report-item:hover { transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
    #reportContent { transition: border-color 0.3s; width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 6px; font-family: inherit; resize: vertical; }
    #reportContent:focus { border-color: #3498db; outline: none; box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2); }

    .report-controls label { display: block; margin-bottom: 5px; font-weight: 500; font-size: 12px; color: #555; }
    .report-controls select, .report-controls input[type="date"] { padding: 8px; border-radius: 4px; border: 1px solid #ddd; font-size: 14px; }

    .debug-panel { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 10px 0; border-left: 4px solid #17a2b8; }
  </style>
</head>
<body>
<button id="toggleTheme" onclick="toggleDarkMode()">üåô Dark Mode</button>
<h2>üìå Elephant Dental Admin Office</h2>

<div id="dashboard">
  <div><b>Pending:</b> <span id="dashPending">0</span></div>
  <div><b>In Progress:</b> <span id="dashInProgress">0</span></div>
  <div><b>Completed:</b> <span id="dashCompleted">0</span></div>
  <div><b>Overdue:</b> <span id="dashOverdue">0</span></div>
</div>

<button id="downloadBtn" onclick="downloadCSV()">üì• Download CSV Report</button>

<div class="charts">
  <div class="chart-card">
    <div id="statusChart" style="width: 400px; height: 300px;"></div>
  </div>
  <div class="chart-card">
    <div id="assigneeChart" style="width: 400px; height: 300px;"></div>
  </div>
</div>

<!-- Enhanced Report Section -->
<h3 style="text-align:center; color:#2c3e50;">üìä Task Reports & Completion Notes</h3>

<!-- Report Writing Section -->
<div class="report-writing">
  <div class="debug-panel">
    <label><strong>üîß Select User for Testing:</strong></label>
    <select id="debugUserSelect" onchange="changeDebugUser(this.value)" style="margin-left: 10px; padding: 5px;">
      <option value="">Loading users...</option>
    </select>
    <button onclick="refreshDebugInfo()" style="margin-left: 10px; padding: 5px 10px; background: #17a2b8; color: white; border: none; border-radius: 3px; cursor: pointer;">Refresh</button>
    <span id="currentUserDisplay" style="margin-left: 15px; font-weight: bold;"></span>
  </div>

  <h4 style="margin-top: 0; color: #2c3e50;">‚úçÔ∏è Write Completion Reports</h4>
  <p style="color: #666; margin-bottom: 15px;">Select a completed task to write a completion report:</p>
  
  <div id="reportableTasks" style="margin-bottom: 15px;">
    <div style="text-align: center; color: #999; padding: 20px;">
      Loading your completed tasks...
    </div>
  </div>
  
  <div id="reportEditor" style="display: none;">
    <h5>Write Report for: <span id="selectedTaskName"></span></h5>
    <textarea id="reportContent" rows="6" placeholder="Describe what was completed, any challenges faced, results achieved, or additional notes..."></textarea>
    <div style="margin-top: 10px; display: flex; gap: 10px;">
      <button onclick="saveTaskReport()" style="background: #27ae60; border: none; color: white; padding: 10px 20px; border-radius: 6px; cursor: pointer;">üíæ Save Report</button>
      <button onclick="cancelReport()" style="background: #95a5a6; border: none; color: white; padding: 10px 20px; border-radius: 6px; cursor: pointer;">‚ùå Cancel</button>
    </div>
  </div>
</div>

<!-- Report Generation Controls -->
<div class="report-controls" style="background: #fff; padding: 20px; border-radius: 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); margin-bottom: 20px;">
  <h4 style="margin-top: 0; color: #2c3e50;">üìà Generate Reports</h4>
  <form id="reportForm" onsubmit="generateReport(event)">
    <div style="display: flex; gap: 10px; flex-wrap: wrap; justify-content: center; align-items: end;">
      <div>
        <label>Status:</label>
        <select id="reportStatus">
          <option value="All">All Status</option>
          <option value="Pending">Pending</option>
          <option value="In Progress">In Progress</option>
          <option value="Completed" selected>Completed</option>
        </select>
      </div>
      <div>
        <label>Assignee:</label>
        <select id="reportAssignee">
          <option value="All">All Assignees</option>
        </select>
      </div>
      <div>
        <label>Priority:</label>
        <select id="reportPriority">
          <option value="All">All Priorities</option>
          <option value="Low">Low</option>
          <option value="Medium">Medium</option>
          <option value="High">High</option>
        </select>
      </div>
      <div>
        <label>From Date:</label>
        <input type="date" id="reportDateFrom">
      </div>
      <div>
        <label>To Date:</label>
        <input type="date" id="reportDateTo">
      </div>
      <div>
        <button type="submit" style="background: #9b59b6;">üîç Generate Report</button>
        <button type="button" onclick="exportDetailedReport()" style="background: #e67e22;">üì• Export Full Report</button>
        <button type="button" onclick="showAllCompletedTasks()" style="background: #17a2b8;">üêõ Debug View</button>
      </div>
    </div>
  </form>
</div>

<!-- Report Results Section -->
<div id="reportResults" style="display: none; background: #fff; padding: 20px; border-radius: 12px; box-shadow: 0 2px 6px rgba(0,0,0,0.1); margin-bottom: 20px;">
  <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
    <h3 style="margin: 0; color: #2c3e50;">üìä Report Results</h3>
    <button onclick="closeReport()" style="background: #e74c3c; border: none; color: white; padding: 8px 15px; border-radius: 6px; cursor: pointer;">‚ùå Close</button>
  </div>
  <div id="reportSummary" style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin-bottom: 15px;"></div>
  <div id="reportTasks"></div>
</div>

<h3 style="text-align:center; color:#2c3e50;">‚ûï Add Task</h3>
<form id="taskForm" onsubmit="handleAddTask(event)">
  <input type="text" id="taskName" placeholder="Task Name" required>
  <input type="text" id="taskDesc" placeholder="Description">
  <select id="taskAssignee" required><option value="">--Select Assignee--</option></select>
  <select id="taskPriority"><option>Low</option><option>Medium</option><option>High</option></select>
  <input type="date" id="taskDate">
  <button type="submit">Add Task</button>
</form>

<div class="board">
  <div class="column" id="Pending"></div>
  <div class="column" id="In Progress"></div>
  <div class="column" id="Completed"></div>
</div>

<script>
google.charts.load('current', {'packages':['corechart']});
let allTasks = [];
let currentReport = null;
let currentUser = "Select User"; // Start with placeholder
let selectedTaskForReport = null;

function toggleDarkMode(){
  document.body.classList.toggle("dark-mode");
  document.getElementById("toggleTheme").textContent = document.body.classList.contains("dark-mode") ? "‚òÄÔ∏è Light Mode" : "üåô Dark Mode";
}

function getInitials(name){ return name.split(' ').map(n=>n[0].toUpperCase()).join('').slice(0,2); }
function stringToColor(str){ let hash=0; for(let i=0;i<str.length;i++){ hash=str.charCodeAt(i)+((hash<<5)-hash); } let color='#'; for(let i=0;i<3;i++){ let value=(hash>>(i*8))&0xFF; color+=('00'+value.toString(16)).substr(-2); } return color; }

function loadTeam(){
  google.script.run.withSuccessHandler(members => {
    const select = document.getElementById("taskAssignee");
    select.innerHTML = '<option value="">--Select Assignee--</option>';
    members.forEach(name => {
      const option = document.createElement("option");
      option.value = name; option.textContent = name;
      select.appendChild(option);
    });
    
    // Setup debug user selector
    const debugSelect = document.getElementById("debugUserSelect");
    debugSelect.innerHTML = '<option value="">Select User...</option>';
    members.forEach(name => {
      const option = document.createElement("option");
      option.value = name;
      option.textContent = name;
      debugSelect.appendChild(option);
    });
    
    // Auto-select the first team member
    if (members.length > 0) {
      currentUser = members[0];
      debugSelect.value = currentUser;
      updateUserDisplay();
      console.log("Auto-selected user:", currentUser);
    }
  }).getTeam();
}

function changeDebugUser(user) {
  if (user) {
    currentUser = user;
    updateUserDisplay();
    console.log("Changed user to:", currentUser);
    loadReportableTasks();
  }
}

function updateUserDisplay() {
  document.getElementById('currentUserDisplay').textContent = `Current User: ${currentUser}`;
}

function refreshDebugInfo() {
  loadTeam();
  loadTasks();
}

function loadTasks(){
  google.script.run.withSuccessHandler(tasks=>{
    allTasks = tasks;
    console.log("Loaded tasks:", tasks);
    renderBoard();
    drawCharts();
    loadReportableTasks();
  }).getTasks();
}

// Load tasks that the current user can write reports for
function loadReportableTasks() {
  if (!currentUser || currentUser === "Select User") {
    document.getElementById("reportableTasks").innerHTML = `
      <div style="text-align: center; color: #999; padding: 20px; background: #f8f9fa; border-radius: 8px;">
        <p>Please select a user from the dropdown above</p>
      </div>
    `;
    return;
  }
  
  google.script.run.withSuccessHandler(tasks => {
    const container = document.getElementById("reportableTasks");
    const userTasks = tasks.filter(task => task.canReport);
    
    console.log("User:", currentUser);
    console.log("Total tasks for reporting:", tasks.length);
    console.log("User can report on:", userTasks.length, "tasks");
    
    if (userTasks.length === 0) {
      // Check if user has any completed tasks at all
      const userCompletedTasks = tasks.filter(task => 
        task.assignee === currentUser && task.status === "Completed"
      );
      
      if (userCompletedTasks.length === 0) {
        container.innerHTML = `
          <div style="text-align: center; color: #999; padding: 20px; background: #f8f9fa; border-radius: 8px;">
            <p>üìù No completed tasks found for <strong>${currentUser}</strong></p>
            <small>Complete some tasks first to write reports!</small>
            <div style="margin-top: 10px; font-size: 0.9em;">
              <strong>Debug Info:</strong><br>
              ‚Ä¢ Current User: <strong>${currentUser}</strong><br>
              ‚Ä¢ Total Tasks: ${allTasks.length}<br>
              ‚Ä¢ Completed Tasks: ${allTasks.filter(t => t.status === 'Completed').length}<br>
              ‚Ä¢ Your Completed Tasks: 0
            </div>
          </div>
        `;
      } else {
        const tasksWithReports = userCompletedTasks.filter(task => task.report && task.report.trim() !== "");
        container.innerHTML = `
          <div style="text-align: center; color: #28a745; padding: 20px; background: #f8f9fa; border-radius: 8px;">
            <p>üéâ All reports completed for <strong>${currentUser}</strong>!</p>
            <small>You've written reports for all your completed tasks.</small>
            <div style="margin-top: 10px; font-size: 0.9em;">
              <strong>Completed Tasks:</strong> ${userCompletedTasks.length}<br>
              <strong>Reports Written:</strong> ${tasksWithReports.length}
            </div>
          </div>
        `;
      }
      return;
    }
    
    let html = `
      <div style="margin-bottom: 15px; padding: 10px; background: #e8f4fc; border-radius: 6px;">
        <strong>Current User:</strong> ${currentUser}<br>
        <strong>Tasks needing reports:</strong> ${userTasks.length}
      </div>
      <div style="display: grid; gap: 10px;">
    `;
    
    userTasks.forEach(task => {
      const hasReport = task.report && task.report.trim() !== "";
      html += `
        <div class="task-report-item" style="background: ${hasReport ? '#d4edda' : '#fff3cd'};">
          <div style="display: flex; justify-content: space-between; align-items: start;">
            <div style="flex: 1;">
              <strong>${task.task}</strong>
              <div style="font-size: 0.9em; color: #666; margin-top: 5px;">
                üìÖ Due: ${task.date || 'Not set'} | 
                ‚ö° Priority: ${task.priority}
              </div>
              ${task.description ? `
                <div style="margin-top: 5px; font-size: 0.85em; color: #777;">
                  <strong>Description:</strong> ${task.description}
                </div>
              ` : ''}
              ${hasReport ? `
                <div style="margin-top: 8px; padding: 8px; background: white; border-radius: 4px; border-left: 3px solid #28a745;">
                  <strong>Your Report:</strong>
                  <p style="margin: 5px 0 0 0; font-size: 0.9em;">${task.report}</p>
                </div>
              ` : ''}
            </div>
            <div style="margin-left: 10px;">
              <button onclick="openReportEditor('${task.id}', '${task.task.replace(/'/g, "\\'")}', '${(task.report || '').replace(/'/g, "\\'")}')" 
                style="background: ${hasReport ? '#ffc107' : '#28a745'}; border: none; color: white; padding: 8px 12px; border-radius: 4px; cursor: pointer; font-size: 0.9em; white-space: nowrap;">
                ${hasReport ? '‚úèÔ∏è Edit Report' : 'üìù Write Report'}
              </button>
            </div>
          </div>
        </div>
      `;
    });
    
    html += `</div>`;
    container.innerHTML = html;
  }).getTasksForReporting(currentUser);
}

function showAllCompletedTasks() {
  google.script.run.withSuccessHandler(tasks => {
    let html = `<h4>All Completed Tasks in System:</h4>`;
    
    if (tasks.length === 0) {
      html += `<p>No completed tasks found in the system.</p>`;
    } else {
      html += `<div style="display: grid; gap: 10px; max-height: 300px; overflow-y: auto;">`;
      tasks.forEach(task => {
        const hasReport = task.report && task.report.trim() !== "";
        html += `
          <div style="border: 1px solid #ddd; padding: 10px; border-radius: 5px; background: ${hasReport ? '#d4edda' : '#fff3cd'};">
            <strong>${task.task}</strong>
            <div style="font-size: 0.9em;">
              <strong>Assignee:</strong> ${task.assignee || 'Unassigned'} | 
              <strong>Report:</strong> ${hasReport ? '‚úÖ Written' : '‚ùå Missing'} |
              <strong>Due:</strong> ${task.date || 'Not set'}
            </div>
            ${task.description ? `<div style="font-size: 0.8em; margin-top: 5px;">${task.description}</div>` : ''}
          </div>
        `;
      });
      html += `</div>`;
    }
    
    // Show in modal
    const debugPanel = document.createElement('div');
    debugPanel.style.cssText = 'position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 20px; border-radius: 10px; box-shadow: 0 0 20px rgba(0,0,0,0.3); z-index: 1000; max-width: 500px; max-height: 400px; overflow: auto;';
    debugPanel.innerHTML = `
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
        <h3 style="margin: 0;">Debug: All Completed Tasks</h3>
        <button onclick="this.parentElement.parentElement.remove()" style="background: #dc3545; color: white; border: none; padding: 5px 10px; border-radius: 3px; cursor: pointer;">Close</button>
      </div>
      ${html}
    `;
    document.body.appendChild(debugPanel);
  }).getAllCompletedTasks();
}

function openReportEditor(taskId, taskName, currentReport) {
  selectedTaskForReport = taskId;
  document.getElementById("selectedTaskName").textContent = taskName;
  document.getElementById("reportContent").value = currentReport || "";
  document.getElementById("reportEditor").style.display = "block";
  
  // Scroll to editor
  document.getElementById("reportEditor").scrollIntoView({ behavior: 'smooth' });
}

function cancelReport() {
  document.getElementById("reportEditor").style.display = "none";
  selectedTaskForReport = null;
}

function saveTaskReport() {
  if (!selectedTaskForReport) return;
  
  const reportContent = document.getElementById("reportContent").value.trim();
  
  if (!reportContent) {
    alert("Please write a report before saving.");
    return;
  }
  
  google.script.run
    .withSuccessHandler(result => {
      alert("Report saved successfully!");
      document.getElementById("reportEditor").style.display = "none";
      selectedTaskForReport = null;
      loadReportableTasks(); // Refresh the list
      loadTasks(); // Refresh main board
    })
    .withFailureHandler(error => {
      alert("Error saving report: " + error.message);
    })
    .updateTaskReport(selectedTaskForReport, reportContent, currentUser);
}

function renderBoard(){
  const today = new Date();
  let pending=0, inProgress=0, completed=0, overdue=0;
  const statusColors = {Pending:'#e74c3c','In Progress':'#3498db','Completed':'#2ecc71'};

  ["Pending","In Progress","Completed"].forEach(status=>{
    const col = document.getElementById(status);
    col.innerHTML = `<h3>${status}</h3>`;
    col.ondragover = ev => ev.preventDefault();
    col.ondrop = drop;

    allTasks.filter(t => t.status===status).forEach(t=>{
      const card = document.createElement("div");
      card.className="task-card";
      card.style.background = statusColors[status] || '#999';
      if(t.date && new Date(t.date) < today && t.status!=="Completed") card.classList.add("overdue");
      if(card.classList.contains("overdue")) overdue++;

      card.draggable = true;
      card.id = t.id;
      card.addEventListener("dragstart", ev=>{ ev.dataTransfer.setData("text/plain", t.id); });

      // Add report status indicator for completed tasks
      const hasReport = t.report && t.report.trim() !== "";
      const reportIndicator = t.status === "Completed" ? 
        (hasReport ? ' üìù' : ' ‚è≥') : '';

      card.innerHTML = `
        <b>${t.task}${reportIndicator}</b>
        <div class="assignee-badge">
          <div class="circle" style="background:${stringToColor(t.assignee||'Unassigned')}">${getInitials(t.assignee||'Unassigned')}</div>
          ${t.assignee || 'Unassigned'}
        </div>
        <div class="description">üìù ${t.description || ''}</div>
        <div class="priority">‚ö° ${t.priority || 'Low'}</div>
        <div class="due-date">üìÖ ${t.date ? t.date : ''}</div>
      `;
      col.appendChild(card);
    });

    if(status==="Pending") pending = col.children.length -1;
    if(status==="In Progress") inProgress = col.children.length -1;
    if(status==="Completed") completed = col.children.length -1;
  });

  document.getElementById("dashPending").textContent = pending;
  document.getElementById("dashInProgress").textContent = inProgress;
  document.getElementById("dashCompleted").textContent = completed;
  document.getElementById("dashOverdue").textContent = overdue;
}

function drop(ev){
  ev.preventDefault();
  const id = ev.dataTransfer.getData("text/plain");
  const task = allTasks.find(t=>t.id==id);
  const newStatus = ev.currentTarget.id;
  if(task.status !== newStatus){
    task.status = newStatus;
    google.script.run.updateTaskStatus(id,newStatus);
    loadTasks();
  }
}

function handleAddTask(event){
  event.preventDefault();
  const task = {
    task: document.getElementById("taskName").value,
    description: document.getElementById("taskDesc").value,
    assignee: document.getElementById("taskAssignee").value,
    priority: document.getElementById("taskPriority").value,
    status: "Pending",
    report: "",
    date: document.getElementById("taskDate").value
  };
  google.script.run.withSuccessHandler(()=>{
    loadTasks();
    document.getElementById("taskForm").reset();
  }).addTask(task);
}

function drawCharts(){
  let statusData = new google.visualization.DataTable();
  statusData.addColumn('string','Status');
  statusData.addColumn('number','Count');
  let statusCounts = {Pending:0,"In Progress":0,Completed:0};
  allTasks.forEach(t=>statusCounts[t.status]++);
  statusData.addRows([
    ['Pending', statusCounts.Pending],
    ['In Progress', statusCounts["In Progress"]],
    ['Completed', statusCounts.Completed]
  ]);
  let statusChart = new google.visualization.PieChart(document.getElementById('statusChart'));
  statusChart.draw(statusData,{title:'Tasks by Status', pieHole:0.4, backgroundColor:'transparent', slices:{0:{color:'#e74c3c'},1:{color:'#3498db'},2:{color:'#2ecc71'}}});

  let assigneeData = new google.visualization.DataTable();
  assigneeData.addColumn('string','Assignee');
  assigneeData.addColumn('number','Tasks');
  let assigneeCounts = {};
  allTasks.forEach(t=>{ let a=t.assignee||"Unassigned"; assigneeCounts[a]=(assigneeCounts[a]||0)+1; });
  Object.keys(assigneeCounts).forEach(a=>assigneeData.addRow([a,assigneeCounts[a]]));
  let barColors = Object.keys(assigneeCounts).map(a=>stringToColor(a));
  let assigneeChart = new google.visualization.BarChart(document.getElementById('assigneeChart'));
  assigneeChart.draw(assigneeData,{title:'Tasks by Assignee', backgroundColor:'transparent', colors:barColors});
}

function downloadCSV(){
  if(allTasks.length===0){ alert("No tasks to download!"); return; }
  const headers = ["Task","Description","Assignee","Priority","Status","Report","Due Date"];
  const rows = allTasks.map(t=>[t.task,t.description,t.assignee,t.priority,t.status,t.report,t.date]);
  let csvContent = "data:text/csv;charset=utf-8," 
    + headers.join(",") + "\n"
    + rows.map(r => r.map(field => `"${(field||"").toString().replace(/"/g,'""')}"`).join(",")).join("\n");
  const encodedUri = encodeURI(csvContent);
  const link = document.createElement("a");
  link.setAttribute("href", encodedUri);
  link.setAttribute("download", "tasks_report.csv");
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

function generateReport(event) {
  event.preventDefault();
  
  const filters = {
    status: document.getElementById("reportStatus").value,
    assignee: document.getElementById("reportAssignee").value,
    priority: document.getElementById("reportPriority").value,
    dateFrom: document.getElementById("reportDateFrom").value,
    dateTo: document.getElementById("reportDateTo").value
  };
  
  google.script.run.withSuccessHandler(displayReport).generateTaskReport(filters);
}

function displayReport(reportData) {
  currentReport = reportData;
  const { tasks, summary, generatedAt } = reportData;
  
  document.getElementById("reportResults").style.display = "block";
  
  // Count tasks with reports
  const tasksWithReports = tasks.filter(task => task.report && task.report.trim() !== "").length;
  
  const summaryHtml = `
    <h4>üìà Report Summary</h4>
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 10px;">
      <div style="text-align: center; padding: 10px; background: #fff; border-radius: 6px; border: 1px solid #e9ecef;">
        <div style="font-size: 24px; font-weight: bold; color: #3498db;">${summary.total}</div>
        <div>Total Tasks</div>
      </div>
      <div style="text-align: center; padding: 10px; background: #fff; border-radius: 6px; border: 1px solid #e9ecef;">
        <div style="font-size: 24px; font-weight: bold; color: #2ecc71;">${summary.completed}</div>
        <div>Completed</div>
      </div>
      <div style="text-align: center; padding: 10px; background: #fff; border-radius: 6px; border: 1px solid #e9ecef;">
        <div style="font-size: 24px; font-weight: bold; color: #17a2b8;">${tasksWithReports}</div>
        <div>With Reports</div>
      </div>
      <div style="text-align: center; padding: 10px; background: #fff; border-radius: 6px; border: 1px solid #e9ecef;">
        <div style="font-size: 24px; font-weight: bold; color: #e74c3c;">${summary.overdue}</div>
        <div>Overdue</div>
      </div>
    </div>
    <div style="margin-top: 10px; font-size: 12px; color: #7f8c8d;">
      Generated: ${new Date(generatedAt).toLocaleString()}
    </div>
  `;
  document.getElementById("reportSummary").innerHTML = summaryHtml;
  
  if (tasks.length > 0) {
    let tasksHtml = `<h4>üìã Task Details (${tasks.length} tasks)</h4>`;
    tasksHtml += `<div style="max-height: 400px; overflow-y: auto;">`;
    tasksHtml += `<table style="width: 100%; border-collapse: collapse;">`;
    tasksHtml += `
      <thead>
        <tr style="background: #34495e; color: white;">
          <th style="padding: 10px; text-align: left;">Task</th>
          <th style="padding: 10px; text-align: left;">Assignee</th>
          <th style="padding: 10px; text-align: left;">Status</th>
          <th style="padding: 10px; text-align: left;">Report</th>
          <th style="padding: 10px; text-align: left;">Due Date</th>
        </tr>
      </thead>
      <tbody>
    `;
    
    tasks.forEach(task => {
      const hasReport = task.report && task.report.trim() !== "";
      const isOverdue = task.date && new Date(task.date) < new Date() && task.status !== "Completed";
      
      tasksHtml += `
        <tr style="border-bottom: 1px solid #ecf0f1;">
          <td style="padding: 10px;">
            <strong>${task.task}</strong><br>
            <small style="color: #7f8c8d;">${task.description || "No description"}</small>
          </td>
          <td style="padding: 10px;">
            <div class="assignee-badge">
              <div class="circle" style="background:${stringToColor(task.assignee||'Unassigned')}">${getInitials(task.assignee||'Unassigned')}</div>
              ${task.assignee || 'Unassigned'}
            </div>
          </td>
          <td style="padding: 10px;">
            <span style="padding: 4px 8px; border-radius: 12px; font-size: 12px; 
              background: ${task.status === 'Completed' ? '#28a745' : task.status === 'In Progress' ? '#17a2b8' : '#dc3545'}; 
              color: white;">
              ${task.status}
            </span>
          </td>
          <td style="padding: 10px;">
            <span style="padding: 4px 8px; border-radius: 12px; font-size: 12px; 
              background: ${hasReport ? '#28a745' : '#ffc107'}; 
              color: white;">
              ${hasReport ? 'üìù Reported' : '‚è≥ Pending'}
            </span>
          </td>
          <td style="padding: 10px; ${isOverdue ? 'color: #dc3545; font-weight: bold;' : ''}">
            ${task.date || '-'} ${isOverdue ? '‚ö†Ô∏è' : ''}
          </td>
        </tr>
      `;
    });
    
    tasksHtml += `</tbody></table></div>`;
    document.getElementById("reportTasks").innerHTML = tasksHtml;
  } else {
    document.getElementById("reportTasks").innerHTML = `<p style="text-align: center; color: #7f8c8d;">No tasks match the current filters.</p>`;
  }
  
  document.getElementById("reportResults").scrollIntoView({ behavior: 'smooth' });
}

function closeReport() {
  document.getElementById("reportResults").style.display = "none";
  currentReport = null;
}

function exportDetailedReport() {
  const filters = {
    status: document.getElementById("reportStatus").value,
    assignee: document.getElementById("reportAssignee").value,
    priority: document.getElementById("reportPriority").value,
    dateFrom: document.getElementById("reportDateFrom").value,
    dateTo: document.getElementById("reportDateTo").value
  };
  
  google.script.run
    .withSuccessHandler(result => {
      const blob = new Blob([result.html], { type: 'text/html' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = result.filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
      alert(`Report exported successfully!\n\nüìä Statistics:\n‚Ä¢ Total Tasks: ${result.stats.totalTasks}\n‚Ä¢ Completed: ${result.stats.completedTasks}\n‚Ä¢ With Reports: ${result.stats.tasksWithReports}\n‚Ä¢ Pending Reports: ${result.stats.tasksWithoutReports}`);
    })
    .withFailureHandler(error => {
      alert("Error generating report: " + error.message);
    })
    .generateDetailedReport(filters);
}

document.addEventListener("DOMContentLoaded",()=>{
  loadTeam();
  loadTasks();
  
  // Load assignees for report filter
  google.script.run.withSuccessHandler(members => {
    const select = document.getElementById("reportAssignee");
    select.innerHTML = '<option value="All">All Assignees</option>';
    members.forEach(name => {
      const option = document.createElement("option");
      option.value = name;
      option.textContent = name;
      select.appendChild(option);
    });
  }).getTeam();
});
</script>
</body>
</html>
